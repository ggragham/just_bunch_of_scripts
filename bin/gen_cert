#!/usr/bin/env bash

# Generate nginx SSL certificate for local development.

# Subject
COUNTRYCODE=${COUNTRYCODE:-"TS"}
COUNTRY=${COUNTRY:-"Test_C"}
LOCATION=${LOCATION:-"Test_L"}
ORGANIZATION=${ORGANIZATION:-"Test_O"}
ORGANIZATION_UNIT=${ORGANIZATION_UNIT:-"Test_OU"}
COMMON_NAME=${COMMON_NAME:-"TEST_CN"}
EMAIL=${EMAIL:-"test@e.mail"}


# OpenSSL
NAME=${NAME:-"default"}
KEY_SIZE=${KEY_SIZE:-"2048"}
LIFETIME=${LIFETIME:-"90"}
KEY_CIPHER=${KEY_CIPHER:-"aes256"}
HASH_ALGO=${HASH_ALGO:-"sha256"}
EXT_FILE=${EXT_FILE:-"domains.cnf"}

# DH
FAST_GEN="1"

printHelp() {
	echo "Usage: $0 [OPTION]"
	echo "Generate nginx SSL certificate for local development."
	echo ""
	echo "Options:"
	echo "--ca       Generate Certificate Authority"
	echo "--cert     Generate Signed Certificate"
	echo "           If 'ca_${NAME}.key' exists, generate signed certificate,"
	echo "           otherwise generate self-signed certificate."
	echo "           Also generates Diffie-Hellman parameters."
	echo ""
	echo "Environment variables (can be set in gen_cert.env file):"
	echo "COUNTRYCODE, COUNTRY, LOCATION, ORGANIZATION, ORGANIZATION_UNIT, COMMON_NAME, EMAIL"
	echo "NAME, KEY_SIZE, LIFETIME, KEY_CIPHER, HASH_ALGO, EXT_FILE, FAST_GEN"
	echo ""
	echo "The file specified by the EXT_FILE environment variable (default 'domains.cnf') is used to specify additional configuration for the certificate."
	echo "It should contain something like the following:"
	echo "subjectAltName = @alt_names"
	echo "[alt_names]"
	echo "IP.1 = 192.168.0.2"
	echo "DNS.1 = example.com"
}

genCertificateAuthority() {
	echo "Gen CA"
	openssl genrsa "-${KEY_CIPHER}" -out "ca_${NAME}.key" "$KEY_SIZE"
	openssl req -new -x509 "-${HASH_ALGO}" -days "${LIFETIME}" -subj "$SUBJECT" -key "ca_${NAME}.key" -out "ca_${NAME}.crt"
}

genSignedCretificate() {
	if [ ! -f "$EXT_FILE" ]; then
		echo "File 'domains.cnf' does not exist."
		exit 1
	fi

	echo "Gen Signed SSL"
	openssl genrsa -out "cert_${NAME}.key" "$KEY_SIZE"
	openssl req -new "-${HASH_ALGO}" -subj "$SUBJECT" -key "cert_${NAME}.key" -out "cert_${NAME}.csr"
	openssl x509 -req "-${HASH_ALGO}" -days "$LIFETIME" -in "cert_${NAME}.csr" -CA "ca_${NAME}.crt" -CAkey "ca_${NAME}.key" -out "cert_${NAME}.crt" -extfile "$EXT_FILE" -CAcreateserial
}

genCertificate() {
	echo "Gen SSL"
	openssl req -x509 -nodes -days "$DAYS" -newkey rsa:"$KEY_SIZE" -subj "$SUBJECT" -keyout "${NAME}.key" -out "${NAME}.crt"
}

genDiffieHellman() {
	echo -e "\nGen DH"
	if [[ -z "$FAST_GEN" ]]; then
		openssl dhparam -out "dh_${NAME}.pem" "$KEY_SIZE"
	else
		openssl dhparam -dsaparam -out "dh_${NAME}.pem" "$KEY_SIZE"
	fi
}

main() {
	if [[ -f ".env" ]]; then
		source .env
	fi
	
	SUBJECT="/C=${COUNTRYCODE}/ST=${COUNTRY}/L=${LOCATION}/O=${ORGANIZATION}/OU=${ORGANIZATION_UNIT}/CN=${COMMON_NAME}/emailAddress=${EMAIL}"

	case "$1" in
	--ca)
		genCertificateAuthority
		;;
	--cert)
		if [[ -f "ca_${NAME}.key" ]]; then
			genSignedCretificate
		else
			genCertificate
		fi
		genDiffieHellman
		;;
	-h | --help)
		printHelp
		exit 0
		;;
	*)
		echo "Error: Invalid argument"
		printHelp
		exit 1
		;;
	esac
}

main "$@"
